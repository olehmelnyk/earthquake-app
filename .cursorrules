# Earthquake App - Development Rules

## Context for Take-Home Assignment

This project is a take-home assignment for a job interview. Focus on:
- **Simplicity**: Avoid overengineering or implementing advanced features unless explicitly requested.
- **Readability**: Write clean, self-documenting code that demonstrates your skills.
- **Core Skills**: Prioritize demonstrating core competencies (e.g., API design, database interactions, frontend-backend integration).
- **Polish Over Perfection**: Since this is not a production project, focus on a polished demo rather than enterprise-level infrastructure.
- **Time Management**: Prioritize completing core requirements over adding extra features.

## Notes for Real-World Considerations

In a real-world project, the following would be considered:
- **Scalability**: Plan for horizontal scaling, caching, and database optimization.
- **Security**: Implement authentication, rate limiting, and data encryption.
- **Monitoring**: Add logging, error tracking, and performance monitoring.
- **CI/CD**: Set up automated testing and deployment pipelines.
- **User Feedback**: Gather and prioritize user feedback for iterative improvements.

## Technical Stack

- typescript (https://www.typescriptlang.org/)
- package manager - pnpm (https://pnpm.io/)
- monorepo - https://nx.dev/
- formatting - eslint + prettier
- database - PostgresSQL (https://www.postgresql.org/)
- ORM - prisma.io (https://www.prisma.io/)
- react (https://react.dev/)
- nextjs (https://nextjs.org/)
- docker (https://www.docker.com/)
- UI library - Shadcn UI (https://ui.shadcn.com/)
- API - GraphQL (https://github.com/apollographql/apollo-server and https://github.com/apollographql/apollo-client)

## Important Instructions

- DO NOT modify `requirements.md` file
- never use type `any`
- always use a proper cli command for shadcn ui - example: `pnpm dlx shadcn@latest add button`
- use tailwindcss for styling (https://tailwindcss.com/)
- use zod for validation (https://zod.dev/)
- graphql - https://graphql.org/
- prefer SWC over babel
- prefer functional components over class components
- prefer named exports over default exports
- prefer arrow functions
- prefer destructuring
- prefer async/await over promises
- prefer template literals over string concatenation
- use eslint and prettier
- use tsx extension for react components
- use proper types for all variables, functions, components, etc.
- write descriptive tests

## Coding Principles

- **SOLID**: Follow Single Responsibility, Open/Closed, Liskov Substitution, Interface Segregation, and Dependency Inversion.
- **DRY**: Avoid duplication by reusing existing utilities, helpers, or patterns.
- **KISS**: Prioritize simple, readable, and maintainable solutions.
- **YAGNI**: Only implement what's needed now; avoid speculative features.
- **GRASP**: Ensure low coupling, high cohesion, and clear responsibility assignment.

## Code Structure and Architecture

- **Package-First Approach**: Prioritize creating shared packages over app-specific code
- **GraphQL Schema & Resolvers**: Place in `/packages/graphql` for reuse between Next.js API and Express
- **Database Access Layer**: Place in `/packages/db` including Prisma schema and client exports
- **UI Component Library**: Place reusable UI components in `/packages/ui` for potential reuse across apps
- **Shared Types**: Place in `/packages/types` for use across both frontend and backend
- **Shared Utilities**: Place in `/packages/utils` for common helper functions and business logic
- **Apps as Thin Shells**: Keep apps (Next.js, Express) as thin shells that primarily compose packages
- **Proper Imports**: Use workspace imports (e.g., `@earthquake-app/graphql`) rather than relative paths
- **Independent Testing**: Each package should have its own unit tests independent of apps

## UI Component Organization

- **Component Library**: Implement Shadcn UI components in `/packages/ui` for consistent styling and behavior
- **Component Structure**: Each UI component should include the component itself, tests, and stories
- **Component Exports**: Use a barrel export pattern to simplify imports
- **Composition Over Inheritance**: Build complex components by composing simpler ones
- **State Management**: Keep UI components stateless where possible, with state managed by the parent app
- **Design System**: Enforce consistent spacing, colors, and typography via shared tokens

## Naming Conventions

- React components: PascalCase (e.g., `EarthquakeList.tsx`)
- Files: kebab-case except for React components (e.g., `import-csv.ts`)
- GraphQL types: PascalCase (e.g., `type Earthquake`)
- Database fields: camelCase (e.g., `magnitude`, `date`)
- Environment variables: UPPER_SNAKE_CASE (e.g., `DATABASE_URL`)
- Test files: Component name followed by `.test.ts(x)` or `.spec.ts(x)`

## TypeScript Best Practices

- Enforce strict TypeScript mode in all tsconfig files
- Never use `any` type - use `unknown` where necessary
- Create explicit interfaces for all data structures
- Use type guards for narrowing types
- Use generics for reusable components/functions
- Avoid type assertions except when absolutely necessary
- Define return types for all functions/methods

## Code Quality Standards

- All code must pass ESLint and Prettier checks
- Use functional components with hooks for React
- Prefer async/await over Promise chains
- Use destructuring for props and state
- Limit function/component complexity (max ~50 lines)
- Add JSDoc comments for public APIs and complex functions
- Maximum line length: 100 characters
- No unused variables or imports
- No console logs in production code (use proper logging service)

## Testing Requirements

- Write tests before or alongside code
- Unit tests for all backend services and resolvers
- Component tests for all frontend components
- Integration tests for GraphQL operations
- Aim for minimum 80% code coverage
- Mock external services and database calls in tests
- Use descriptive test names following "it should..." pattern

## Error Handling

- Use custom error classes for different error types
- Validate all user inputs with Zod schemas
- Return descriptive error messages from GraphQL resolvers
- Implement global error handling for uncaught exceptions
- Log all errors with appropriate severity levels
- Handle errors gracefully in the UI with user-friendly messages

## Performance Considerations

- Use pagination for all list queries
- Add appropriate database indexes
- Optimize frontend rendering for large datasets
- Implement DataLoader for N+1 query prevention
- Add proper caching strategies where appropriate
- Use server-side rendering for initial page loads

## Accessibility Standards

- Follow WCAG 2.1 AA guidelines
- Ensure proper keyboard navigation
- Add appropriate ARIA attributes
- Maintain color contrast ratios
- Support screen readers
- Test with accessibility tools

## Git Workflow (Simplified for Take-Home Assignment)

- Create a well-organized Git repository
- Use meaningful commit messages
- Include a .gitignore file for node_modules, build files, etc.
- Commit frequently with logical chunks of work
- Consider adding tags for major milestones
- Ensure the final submission is on the main branch

## Code Change Rules

- **Minimal Changes**: Apply the smallest possible change to achieve the goal; fix rather than rewrite.
- **Follow Existing Patterns**: Match naming conventions, folder structure, async patterns (e.g., Promises vs. async/await), and coding style of the codebase.
- **Reuse Existing Code**: Leverage existing snippets, utils, helpers, or internal libraries instead of creating new implementations.
- **Library Preference**: Use built-in JavaScript methods, internal libraries, or established external libraries (e.g., `lodash`, `date-fns`, `axios`) over custom solutions or new dependencies.
- **No Reinvention**: Avoid reimplementing functionality that exists in the codebase, internal libraries, or standard libraries unless explicitly requested.
- **Analyze Existing Codebase**: Before suggesting changes, analyze the repo for existing patterns, guides, snippets, and helpers to ensure alignment.
- **Respect Internal Conventions**: Use internal naming schemes (e.g., `utils/myHelper` vs. generic `helper`), existing error types, and established folder structures.

## Best Practices

- **Readability**: Write self-documenting code with meaningful variable/function names (e.g., `fetchUserData` vs. `getX`) consistent with codebase conventions.
- **Modularity**: Break code into small, reusable functions or modules following the single responsibility principle and existing module patterns.
- **Immutability**: Favor immutability (e.g., `const`, spread operators) to reduce side effects, matching existing practices.
- **Error Handling**: Use try/catch for async operations, return meaningful errors, and follow existing error-handling patterns (e.g., custom `ApiError` classes).
- **Consistency with Existing Code**: Mimic the tone, structure, and style of the codebase (e.g., functional vs. OOP, camelCase vs. kebab-case).
- **Use Internal Helpers**: Prefer internal utilities (e.g., `src/utils/apiFetch`) over generic solutions if they exist.
- **Avoid Over-Abstraction**: Match the abstraction level of the codebaseâ€”don't introduce complex patterns (e.g., HOCs, custom hooks) unless already in use.

## Demonstration Focus (Take-Home Specific)

- **README Quality**: Create a professional, clear README that shows attention to detail
- **Core Requirements**: Ensure all requirements in the assignment are met before adding extras
- **Code Organization**: Demonstrate your ability to organize code in a maintainable way
- **Error States**: Handle edge cases and show how the application responds to errors
- **UI/UX Considerations**: Create a clean, intuitive interface even if not explicitly required
- **Database Design**: Show thoughtful database schema design and relationships
- **GraphQL Implementation**: Demonstrate proper understanding of GraphQL principles
